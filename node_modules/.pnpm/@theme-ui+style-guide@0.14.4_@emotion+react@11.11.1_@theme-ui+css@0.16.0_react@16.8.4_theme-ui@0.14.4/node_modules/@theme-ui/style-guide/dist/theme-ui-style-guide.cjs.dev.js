'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var themeUi = require('theme-ui');
var Color = require('color');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var Color__default = /*#__PURE__*/_interopDefault(Color);

const useTheme = () => themeUi.useThemeUI().theme;

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const Card = props => themeUi.jsx("div", _extends({}, props, {
  sx: {
    variant: 'styles.Card'
  }
}));

const TypeStyle = ({
  fontSize = 5,
  fontFamily = 'body',
  lineHeight = 'body',
  fontWeight = 'body',
  children = 'Aa',
  truncate = true,
  ...props
}) => {
  return themeUi.jsx(Card, _extends({}, props, {
    children: children,
    sx: {
      fontFamily,
      fontSize,
      lineHeight,
      fontWeight,
      ...(truncate ? {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap'
      } : {})
    }
  }));
};

const getValue = fontSize => typeof fontSize === 'number' ? `${fontSize}px` : fontSize;

const TypeScale = ({
  reverse = true,
  ...props
}) => {
  const theme = useTheme() || {};
  const fontSizeEntries = reverse ? Object.entries(theme.fontSizes || []).reverse() : Object.entries(theme.fontSizes || []);
  return themeUi.jsx("div", {
    sx: {
      display: 'flex',
      flexWrap: 'wrap',
      alignItems: 'baseline'
    }
  }, fontSizeEntries.map(([key, val]) => {
    if (!val || typeof val === 'object') {
      // TODO: `theme.fontSizes` can be a deeply nested object.
      // We should either update the types or recursively render here.
      return null;
    }

    return themeUi.jsx(TypeStyle, _extends({
      key: key,
      fontSize: key,
      sx: {
        mr: 3
      },
      children: getValue(val)
    }, props));
  }));
};

const HeadingStyle = props => themeUi.jsx(TypeStyle, _extends({
  fontFamily: "heading",
  fontWeight: "heading",
  lineHeight: "heading"
}, props));

const FontFamily = ({
  name
}) => {
  const {
    fonts
  } = useTheme();
  return themeUi.get(fonts, name);
};

const toHex = raw => {
  try {
    return Color__default['default'](raw).hex();
  } catch (e) {
    return;
  }
};

const ColorSwatch = ({
  color,
  name,
  size = 128,
  label = true,
  ...props
}) => {
  const {
    colors
  } = useTheme();
  const value = themeUi.get(colors, color);
  return themeUi.jsx("div", _extends({}, props, {
    title: `${toHex(value)}`
  }), themeUi.jsx("div", {
    sx: {
      width: size,
      height: size,
      bg: color
    }
  }), label && themeUi.jsx("div", {
    sx: {
      py: 2
    }
  }, name || color));
};

const join = (...args) => args.filter(Boolean).join('.');

const ColorRow = ({
  colors,
  name,
  omit = ['modes'],
  render,
  size,
  ...props
}) => {
  return themeUi.jsx("div", null, themeUi.jsx("div", {
    sx: {
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, Object.keys(colors).map(key => {
    const color = colors[key];
    if (!color || omit.includes(key)) return false;
    const id = join(name, key);

    if (typeof color === 'object') {
      return themeUi.jsx(ColorRow, _extends({}, props, {
        key: key,
        name: id,
        colors: color,
        size: size,
        omit: omit
      }));
    }

    const swatch = themeUi.jsx(ColorSwatch, _extends({}, props, {
      key: key,
      name: id,
      color: id,
      size: size,
      sx: {
        m: 2
      }
    }));

    if (typeof render === 'function') {
      return render({
        swatch,
        color,
        key,
        name: id
      });
    }

    return swatch;
  })));
};
const ColorPalette = ({
  omit,
  mode,
  ...props
}) => {
  const theme = useTheme();
  let colors = theme.colors;

  if (mode && colors.modes) {
    colors = colors.modes[mode] || colors;
  }

  return themeUi.jsx("div", {
    style: {
      marginLeft: -8,
      marginRight: -8
    }
  }, themeUi.jsx(ColorRow, _extends({}, props, {
    omit: omit,
    colors: colors
  })));
};

const ThemeCard = props => {
  return themeUi.jsx(Card, _extends({}, props, {
    sx: {
      color: 'text',
      bg: 'background'
    }
  }), themeUi.jsx(TypeStyle, null), themeUi.jsx(ColorPalette, {
    label: false,
    size: 32
  }));
};

exports.ColorPalette = ColorPalette;
exports.ColorSwatch = ColorSwatch;
exports.FontFamily = FontFamily;
exports.HeadingStyle = HeadingStyle;
exports.ThemeCard = ThemeCard;
exports.TypeScale = TypeScale;
exports.TypeStyle = TypeStyle;
exports.useTheme = useTheme;
