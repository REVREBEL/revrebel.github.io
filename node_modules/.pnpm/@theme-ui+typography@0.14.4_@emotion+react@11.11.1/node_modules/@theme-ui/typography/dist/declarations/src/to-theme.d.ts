import verticalRhythm from 'compass-vertical-rhythm';
import { Theme, Scale, ThemeStyles } from '@theme-ui/css';
import CSS from 'csstype';
import { TypographyOptions } from 'typography';
import { Merge } from 'type-fest';
declare module '@theme-ui/css' {
    interface Theme {
        typography?: ThemeTypographyRhythm;
    }
}
declare const unwantedTypographyOptions: readonly ["headerColor", "bodyColor", "overrideStyles", "overrideThemeStyles", "plugins"];
declare type UnwantedTypographyOptions = typeof unwantedTypographyOptions[number];
declare type BaseTypographyOptions = Omit<TypographyOptions, UnwantedTypographyOptions>;
interface ChangedTypographyOptions {
    baseFontSize: number;
}
export interface CustomTypographyOptions extends Merge<Required<BaseTypographyOptions>, ChangedTypographyOptions> {
}
export interface ThemeTypographyRhythm extends verticalRhythm.VerticalRhythm {
    options: CustomTypographyOptions;
}
export declare const toUnitless: typeof parseFloat;
export declare const getScale: (opts: CustomTypographyOptions) => (value: number) => number;
export declare type ThemeSpace = number[];
export declare const getSpace: (rhythm: verticalRhythm.VerticalRhythm, opts: CustomTypographyOptions) => ThemeSpace;
export declare type ThemeFonts = Scale<CSS.Property.FontFamily> & {
    body: CSS.Property.FontFamily;
    heading: CSS.Property.FontFamily;
};
export declare const getFonts: (rhythm: verticalRhythm.VerticalRhythm, opts: CustomTypographyOptions) => ThemeFonts;
export declare type ThemeFontSizes = number[];
export declare const getFontSizes: (rhythm: verticalRhythm.VerticalRhythm, opts: CustomTypographyOptions) => ThemeFontSizes;
export declare type ThemeLineHeights = Scale<CSS.Property.LineHeight<string | number>> & {
    body: CSS.Property.LineHeight<string | number>;
    heading: CSS.Property.LineHeight<string | number>;
};
export declare const getLineHeights: (rhythm: verticalRhythm.VerticalRhythm, opts: CustomTypographyOptions) => ThemeLineHeights;
export declare type ThemeFontWeights = Scale<CSS.Property.FontWeight> & {
    body: CSS.Property.FontWeight;
    bold: CSS.Property.FontWeight;
    heading: CSS.Property.FontWeight;
};
export declare const getFontWeights: (rhythm: verticalRhythm.VerticalRhythm, opts: CustomTypographyOptions) => ThemeFontWeights;
interface ThemeConvertedFromTypographyConfig extends Theme {
    space: ThemeSpace;
    fonts: ThemeFonts;
    fontSizes: ThemeFontSizes;
    fontWeights: ThemeFontWeights;
    lineHeights: ThemeLineHeights;
    styles: ThemeStyles;
    typography: ThemeTypographyRhythm;
}
export declare const toTheme: (options?: TypographyOptions | undefined) => ThemeConvertedFromTypographyConfig;
export default toTheme;
